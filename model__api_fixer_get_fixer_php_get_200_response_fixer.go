/*
Wallos API

API documentation for Wallos

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiFixerGetFixerPhpGet200ResponseFixer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiFixerGetFixerPhpGet200ResponseFixer{}

// ApiFixerGetFixerPhpGet200ResponseFixer struct for ApiFixerGetFixerPhpGet200ResponseFixer
type ApiFixerGetFixerPhpGet200ResponseFixer struct {
	// The API key used for accessing Fixer.
	ApiKey *string `json:"api_key,omitempty"`
	// The ID of the provider.
	Provider *int32 `json:"provider,omitempty"`
	// The name of the provider.
	ProviderName *string `json:"provider_name,omitempty"`
}

// NewApiFixerGetFixerPhpGet200ResponseFixer instantiates a new ApiFixerGetFixerPhpGet200ResponseFixer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiFixerGetFixerPhpGet200ResponseFixer() *ApiFixerGetFixerPhpGet200ResponseFixer {
	this := ApiFixerGetFixerPhpGet200ResponseFixer{}
	return &this
}

// NewApiFixerGetFixerPhpGet200ResponseFixerWithDefaults instantiates a new ApiFixerGetFixerPhpGet200ResponseFixer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiFixerGetFixerPhpGet200ResponseFixerWithDefaults() *ApiFixerGetFixerPhpGet200ResponseFixer {
	this := ApiFixerGetFixerPhpGet200ResponseFixer{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetProvider() int32 {
	if o == nil || IsNil(o.Provider) {
		var ret int32
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetProviderOk() (*int32, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given int32 and assigns it to the Provider field.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) SetProvider(v int32) {
	o.Provider = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ApiFixerGetFixerPhpGet200ResponseFixer) SetProviderName(v string) {
	o.ProviderName = &v
}

func (o ApiFixerGetFixerPhpGet200ResponseFixer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiFixerGetFixerPhpGet200ResponseFixer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.ProviderName) {
		toSerialize["provider_name"] = o.ProviderName
	}
	return toSerialize, nil
}

type NullableApiFixerGetFixerPhpGet200ResponseFixer struct {
	value *ApiFixerGetFixerPhpGet200ResponseFixer
	isSet bool
}

func (v NullableApiFixerGetFixerPhpGet200ResponseFixer) Get() *ApiFixerGetFixerPhpGet200ResponseFixer {
	return v.value
}

func (v *NullableApiFixerGetFixerPhpGet200ResponseFixer) Set(val *ApiFixerGetFixerPhpGet200ResponseFixer) {
	v.value = val
	v.isSet = true
}

func (v NullableApiFixerGetFixerPhpGet200ResponseFixer) IsSet() bool {
	return v.isSet
}

func (v *NullableApiFixerGetFixerPhpGet200ResponseFixer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiFixerGetFixerPhpGet200ResponseFixer(val *ApiFixerGetFixerPhpGet200ResponseFixer) *NullableApiFixerGetFixerPhpGet200ResponseFixer {
	return &NullableApiFixerGetFixerPhpGet200ResponseFixer{value: val, isSet: true}
}

func (v NullableApiFixerGetFixerPhpGet200ResponseFixer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiFixerGetFixerPhpGet200ResponseFixer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
