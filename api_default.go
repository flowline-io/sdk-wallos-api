/*
Wallos API

API documentation for Wallos

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiApiAdminGetAdminSettingsPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

// API key of the user.
func (r ApiApiAdminGetAdminSettingsPhpGetRequest) ApiKey(apiKey string) ApiApiAdminGetAdminSettingsPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiAdminGetAdminSettingsPhpGetRequest) Execute() (*ApiAdminGetAdminSettingsPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiAdminGetAdminSettingsPhpGetExecute(r)
}

/*
ApiAdminGetAdminSettingsPhpGet Get Admin Settings

Retrieve admin settings from the Wallos application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAdminGetAdminSettingsPhpGetRequest
*/
func (a *DefaultAPIService) ApiAdminGetAdminSettingsPhpGet(ctx context.Context) ApiApiAdminGetAdminSettingsPhpGetRequest {
	return ApiApiAdminGetAdminSettingsPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiAdminGetAdminSettingsPhpGet200Response
func (a *DefaultAPIService) ApiAdminGetAdminSettingsPhpGetExecute(r ApiApiAdminGetAdminSettingsPhpGetRequest) (*ApiAdminGetAdminSettingsPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAdminGetAdminSettingsPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiAdminGetAdminSettingsPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/admin/get_admin_settings.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiAdminGetAdminSettingsPhpGet401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiCategoriesGetCategoriesPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

// API key of the user.
func (r ApiApiCategoriesGetCategoriesPhpGetRequest) ApiKey(apiKey string) ApiApiCategoriesGetCategoriesPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiCategoriesGetCategoriesPhpGetRequest) Execute() (*ApiCategoriesGetCategoriesPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiCategoriesGetCategoriesPhpGetExecute(r)
}

/*
ApiCategoriesGetCategoriesPhpGet Get Categories

Retrieve a list of categories from the Wallos application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCategoriesGetCategoriesPhpGetRequest
*/
func (a *DefaultAPIService) ApiCategoriesGetCategoriesPhpGet(ctx context.Context) ApiApiCategoriesGetCategoriesPhpGetRequest {
	return ApiApiCategoriesGetCategoriesPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiCategoriesGetCategoriesPhpGet200Response
func (a *DefaultAPIService) ApiCategoriesGetCategoriesPhpGetExecute(r ApiApiCategoriesGetCategoriesPhpGetRequest) (*ApiCategoriesGetCategoriesPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiCategoriesGetCategoriesPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiCategoriesGetCategoriesPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/categories/get_categories.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiAdminGetAdminSettingsPhpGet401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiCurrenciesGetCurrenciesPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

// API key of the user.
func (r ApiApiCurrenciesGetCurrenciesPhpGetRequest) ApiKey(apiKey string) ApiApiCurrenciesGetCurrenciesPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiCurrenciesGetCurrenciesPhpGetRequest) Execute() (*ApiCurrenciesGetCurrenciesPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiCurrenciesGetCurrenciesPhpGetExecute(r)
}

/*
ApiCurrenciesGetCurrenciesPhpGet Get Currencies

Retrieve a list of currencies and the main currency of the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiCurrenciesGetCurrenciesPhpGetRequest
*/
func (a *DefaultAPIService) ApiCurrenciesGetCurrenciesPhpGet(ctx context.Context) ApiApiCurrenciesGetCurrenciesPhpGetRequest {
	return ApiApiCurrenciesGetCurrenciesPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiCurrenciesGetCurrenciesPhpGet200Response
func (a *DefaultAPIService) ApiCurrenciesGetCurrenciesPhpGetExecute(r ApiApiCurrenciesGetCurrenciesPhpGetRequest) (*ApiCurrenciesGetCurrenciesPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiCurrenciesGetCurrenciesPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiCurrenciesGetCurrenciesPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/currencies/get_currencies.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiAdminGetAdminSettingsPhpGet401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiFixerGetFixerPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

// API key of the user.
func (r ApiApiFixerGetFixerPhpGetRequest) ApiKey(apiKey string) ApiApiFixerGetFixerPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiFixerGetFixerPhpGetRequest) Execute() (*ApiFixerGetFixerPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiFixerGetFixerPhpGetExecute(r)
}

/*
ApiFixerGetFixerPhpGet Get Fixer Settings

Retrieve the Fixer settings for the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiFixerGetFixerPhpGetRequest
*/
func (a *DefaultAPIService) ApiFixerGetFixerPhpGet(ctx context.Context) ApiApiFixerGetFixerPhpGetRequest {
	return ApiApiFixerGetFixerPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiFixerGetFixerPhpGet200Response
func (a *DefaultAPIService) ApiFixerGetFixerPhpGetExecute(r ApiApiFixerGetFixerPhpGetRequest) (*ApiFixerGetFixerPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiFixerGetFixerPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiFixerGetFixerPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/fixer/get_fixer.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "api_key", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiAdminGetAdminSettingsPhpGet401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHouseholdGetHouseholdPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

func (r ApiApiHouseholdGetHouseholdPhpGetRequest) ApiKey(apiKey string) ApiApiHouseholdGetHouseholdPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiHouseholdGetHouseholdPhpGetRequest) Execute() (*ApiHouseholdGetHouseholdPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiHouseholdGetHouseholdPhpGetExecute(r)
}

/*
ApiHouseholdGetHouseholdPhpGet Get Household

Retrieve the household members.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiHouseholdGetHouseholdPhpGetRequest
*/
func (a *DefaultAPIService) ApiHouseholdGetHouseholdPhpGet(ctx context.Context) ApiApiHouseholdGetHouseholdPhpGetRequest {
	return ApiApiHouseholdGetHouseholdPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiHouseholdGetHouseholdPhpGet200Response
func (a *DefaultAPIService) ApiHouseholdGetHouseholdPhpGetExecute(r ApiApiHouseholdGetHouseholdPhpGetRequest) (*ApiHouseholdGetHouseholdPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiHouseholdGetHouseholdPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiHouseholdGetHouseholdPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/household/get_household.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiNotificationsGetNotificationSettingsPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

func (r ApiApiNotificationsGetNotificationSettingsPhpGetRequest) ApiKey(apiKey string) ApiApiNotificationsGetNotificationSettingsPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiNotificationsGetNotificationSettingsPhpGetRequest) Execute() (*ApiNotificationsGetNotificationSettingsPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiNotificationsGetNotificationSettingsPhpGetExecute(r)
}

/*
ApiNotificationsGetNotificationSettingsPhpGet Get Notification Settings

Retrieve the notification settings for the enabled methods.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiNotificationsGetNotificationSettingsPhpGetRequest
*/
func (a *DefaultAPIService) ApiNotificationsGetNotificationSettingsPhpGet(ctx context.Context) ApiApiNotificationsGetNotificationSettingsPhpGetRequest {
	return ApiApiNotificationsGetNotificationSettingsPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiNotificationsGetNotificationSettingsPhpGet200Response
func (a *DefaultAPIService) ApiNotificationsGetNotificationSettingsPhpGetExecute(r ApiApiNotificationsGetNotificationSettingsPhpGetRequest) (*ApiNotificationsGetNotificationSettingsPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiNotificationsGetNotificationSettingsPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiNotificationsGetNotificationSettingsPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/notifications/get_notification_settings.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "api_key", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

func (r ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest) ApiKey(apiKey string) ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest) Execute() (*ApiPaymentMethodsGetPaymentMethodsPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiPaymentMethodsGetPaymentMethodsPhpGetExecute(r)
}

/*
ApiPaymentMethodsGetPaymentMethodsPhpGet Get Payment Methods

Retrieve the available payment methods.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest
*/
func (a *DefaultAPIService) ApiPaymentMethodsGetPaymentMethodsPhpGet(ctx context.Context) ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest {
	return ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiPaymentMethodsGetPaymentMethodsPhpGet200Response
func (a *DefaultAPIService) ApiPaymentMethodsGetPaymentMethodsPhpGetExecute(r ApiApiPaymentMethodsGetPaymentMethodsPhpGetRequest) (*ApiPaymentMethodsGetPaymentMethodsPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPaymentMethodsGetPaymentMethodsPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiPaymentMethodsGetPaymentMethodsPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/payment_methods/get_payment_methods.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "api_key", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiSettingsGetSettingsPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
}

func (r ApiApiSettingsGetSettingsPhpGetRequest) ApiKey(apiKey string) ApiApiSettingsGetSettingsPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiApiSettingsGetSettingsPhpGetRequest) Execute() (*ApiSettingsGetSettingsPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiSettingsGetSettingsPhpGetExecute(r)
}

/*
ApiSettingsGetSettingsPhpGet Get User Settings

Retrieve the user settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSettingsGetSettingsPhpGetRequest
*/
func (a *DefaultAPIService) ApiSettingsGetSettingsPhpGet(ctx context.Context) ApiApiSettingsGetSettingsPhpGetRequest {
	return ApiApiSettingsGetSettingsPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiSettingsGetSettingsPhpGet200Response
func (a *DefaultAPIService) ApiSettingsGetSettingsPhpGetExecute(r ApiApiSettingsGetSettingsPhpGetRequest) (*ApiSettingsGetSettingsPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiSettingsGetSettingsPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiSettingsGetSettingsPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/settings/get_settings.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "api_key", r.apiKey, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiSubscriptionsGetMonthlyCostPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
	month *int32
	year *int32
}

// The API key of the user.
func (r ApiApiSubscriptionsGetMonthlyCostPhpGetRequest) ApiKey(apiKey string) ApiApiSubscriptionsGetMonthlyCostPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

// The month for which the cost is to be calculated.
func (r ApiApiSubscriptionsGetMonthlyCostPhpGetRequest) Month(month int32) ApiApiSubscriptionsGetMonthlyCostPhpGetRequest {
	r.month = &month
	return r
}

// The year for which the cost is to be calculated.
func (r ApiApiSubscriptionsGetMonthlyCostPhpGetRequest) Year(year int32) ApiApiSubscriptionsGetMonthlyCostPhpGetRequest {
	r.year = &year
	return r
}

func (r ApiApiSubscriptionsGetMonthlyCostPhpGetRequest) Execute() (*ApiSubscriptionsGetMonthlyCostPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiSubscriptionsGetMonthlyCostPhpGetExecute(r)
}

/*
ApiSubscriptionsGetMonthlyCostPhpGet Get Monthly Cost

Retrieve the total cost of subscriptions for a specific month and year.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSubscriptionsGetMonthlyCostPhpGetRequest
*/
func (a *DefaultAPIService) ApiSubscriptionsGetMonthlyCostPhpGet(ctx context.Context) ApiApiSubscriptionsGetMonthlyCostPhpGetRequest {
	return ApiApiSubscriptionsGetMonthlyCostPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiSubscriptionsGetMonthlyCostPhpGet200Response
func (a *DefaultAPIService) ApiSubscriptionsGetMonthlyCostPhpGetExecute(r ApiApiSubscriptionsGetMonthlyCostPhpGetRequest) (*ApiSubscriptionsGetMonthlyCostPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiSubscriptionsGetMonthlyCostPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiSubscriptionsGetMonthlyCostPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/subscriptions/get_monthly_cost.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}
	if r.month == nil {
		return localVarReturnValue, nil, reportError("month is required and must be specified")
	}
	if r.year == nil {
		return localVarReturnValue, nil, reportError("year is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "month", r.month, "", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "year", r.year, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiSubscriptionsGetSubscriptionsPhpGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	apiKey *string
	member *string
	category *int32
	paymentMethod *int32
	state *bool
	disabledToBottom *bool
	sort *string
	convertCurrency *bool
}

// The API key of the user.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) ApiKey(apiKey string) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.apiKey = &apiKey
	return r
}

// Comma-separated IDs of the members to filter.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) Member(member string) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.member = &member
	return r
}

// The ID of the category to filter.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) Category(category int32) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.category = &category
	return r
}

// The ID of the payment method to filter.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) PaymentMethod(paymentMethod int32) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// The state of the subscription to filter [0 - active, 1 - inactive].
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) State(state bool) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.state = &state
	return r
}

// Whether to sort inactive subscriptions to the bottom.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) DisabledToBottom(disabledToBottom bool) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.disabledToBottom = &disabledToBottom
	return r
}

// The sorting method [&#39;name&#39;, &#39;id&#39;, &#39;next_payment&#39;, &#39;price&#39;, etc.].
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) Sort(sort string) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.sort = &sort
	return r
}

// Whether to convert the prices to the main currency.
func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) ConvertCurrency(convertCurrency bool) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	r.convertCurrency = &convertCurrency
	return r
}

func (r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) Execute() (*ApiSubscriptionsGetSubscriptionsPhpGet200Response, *http.Response, error) {
	return r.ApiService.ApiSubscriptionsGetSubscriptionsPhpGetExecute(r)
}

/*
ApiSubscriptionsGetSubscriptionsPhpGet Get Subscriptions

Retrieve a list of subscriptions with optional filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiSubscriptionsGetSubscriptionsPhpGetRequest
*/
func (a *DefaultAPIService) ApiSubscriptionsGetSubscriptionsPhpGet(ctx context.Context) ApiApiSubscriptionsGetSubscriptionsPhpGetRequest {
	return ApiApiSubscriptionsGetSubscriptionsPhpGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiSubscriptionsGetSubscriptionsPhpGet200Response
func (a *DefaultAPIService) ApiSubscriptionsGetSubscriptionsPhpGetExecute(r ApiApiSubscriptionsGetSubscriptionsPhpGetRequest) (*ApiSubscriptionsGetSubscriptionsPhpGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiSubscriptionsGetSubscriptionsPhpGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiSubscriptionsGetSubscriptionsPhpGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/subscriptions/get_subscriptions.php"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return localVarReturnValue, nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "", "")
	if r.member != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member", r.member, "", "")
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "", "")
	}
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "payment_method", r.paymentMethod, "", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "", "")
	}
	if r.disabledToBottom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disabled_to_bottom", r.disabledToBottom, "", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "", "")
	}
	if r.convertCurrency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convert_currency", r.convertCurrency, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
